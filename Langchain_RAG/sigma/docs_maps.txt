Home
Community
QuickStarts
Status
Documentation
API Recipes
API Reference
What's New
Search
START
About Sigma
Start using Sigma
CONNECT
Connect to data sources
Manage connections
ADD DATA
CSV uploads
Input tables
MODEL
Get started with data modeling (Beta)
Data models (Beta)
Model data from database tables
Datasets
Add and manage data
Join data
Transform data
ANALYZE
Workbook basics
Build a workbook
Data elements
Tables
Query
MANAGE WORKBOOKS
Manage a workbook
Workbook templates
Workbook lifecycle
Workbook performance
Workbook security
Manage SQL queries
CHART
Intro to charts
Build a chart
Customize a chart
FILTER
Filter data
Intro to control elements
Work with controls
DESIGN
Design layout
UI elements
Workbook formatting
ADD LOGIC
Intro to actions
Create workbook actions
Configure workbook actions
INTERACT
Interact with workbooks
Interact with charts
Collaborate in workbooks
Search for files in your organization
SHARE
Share a workbook
Share a folder
Share templates
Send or schedule workbook exports
Export data
Manage scheduled exports
About exporting data
CALCULATE
Operators overview
Use AI with formulas (Beta)
Perform AI queries
Functions
Metrics
Custom functions
EMBED
Intro to embedded analytics
Public embedding
Secure embedding
Advanced data security in embeds
Additional embedding configurations
Embed SDK for React
DEVELOP
Sigma API
Plugin development
ADMIN
Administer Sigma
Users and teams
Permissions
Authentication
Third-party integrations
Organization settings
Customize
Localize
Manage assets
Audit and usage
Develop
SUPPORT
Sigma support
Sigma product releases
Supported regions, data platforms, and features
Maps
Suggest Edits
Plot a map
You can create a map via the PAGE ELEMENTS section of your workbook's editor panel or directly from an existing data element.
Mapped data dpes not display on the page canvas until all required plot fields are defined.
Add columns to open fields using either the field's + menu or dragging and dropping the column.
Map types
Workbooks support three distinct map types: Region, Point and Geography.
Choose your map type based on your available data and the results you want to see. For example, if you want to map a text column [State] with cell values like "Colorado" and "California", choose a Region map type.
Map - Region
Region maps require a single text column in the Region property. Column values must match one of the following region types and be consistent within the column.
ðŸ“˜
Region values are not case sensitive. For example, the value for the state of California can be California, california, CA, Ca, or ca. However, all values in the column should use the same supported identifier and capitalization for data consistency.
Region type Supported identifiers
Canadian provinces
Name (e.g., Ontario, Alberta, British Columbia)
Abbreviation (e.g., ON, AB, BC)
Countries
Name (e.g., United States, United States of America, Australia, United Kingdom)
Initialism (e.g., U.S.A., AUS, U.K.)
ISO 3166-1 alpha-2 code (e.g., US, AU, GB)
ISO 3166-1 alpha-3 code (e.g.,USA, AUS, GBR)
ISO 3166-1 numeric-3 code (e.g., 840, 826, 036)
US CBSA/MSA
CBSA/MSA code (e.g., San Francisco-Oakland-Hayward, CA, New York-Newark-Jersey City, NY-NJ-PA, Denver-Aurora-Lakewood, CO)
US counties
County name, state name (e.g., Alameda, California, Kings, New York, Denver, Colorado)
FIPS code (e.g., 06001, 36047, 08031)
County names must not include the words "County" or "Parish."
US postal places
(cities)
City name, state abbreviation (e.g., Oakland, CA, Brooklyn, NY, Denver, CO)
US states
Name (e.g., California, New York, Colorado)
Abbreviation (e.g., CA, NY, CO)
US zip codes
Zip code (e.g., 94601, 11226, 80219)
Map - Point
Point maps require a number column on both the map's LATITUDE and LONGITUDE fields.
Map - Geography
WKT and JSON formats allow the storage of more complex geographical data than simple numeric lat/long columns.
Sigma's Map - Geography chart requires a geography or variant data column on the map's Geography field. If your WKT or GeoJSON data is stored as a text column (abc), you can convert it using the Geography or Variant function.
GeoJSON data must also have "coordinates" nested within a "geometry" key in order to be plotted. In GeoJSON and our geography type, the coordinate order is always longitude, latitude.
Examples
For example, given the following GeoJSON data:
{ "geometry": {"coordinates": [-94.042964, 33.019219] } }
Below is a non-working example, even though it is valid GeoJSON, as it lacks the "geometry" key:
JSON
{  
    "coordinates": [  
        [30, 10], [10, 30], [40, 40]  
    ]  
}
This is a working example:
JSON
{  
  "geometry": {  
    "coordinates": [  
      [30, 10], [10, 30], [40, 40]  
    ]  
  }  
}
If your GeoJSON is structured like the non-working example, you can use Sigma's CallVariant passthrough function to prepend the "geometry" key.
This example invokes Snowflake's "object_construct" function to perform this:
CallVariant("object_construct", "geometry", Json([Column with GeoJSON text]))
RELATED RESOURCES
Intro to charts
Build a geography map
Display chart data labels
Resources
Sigma home
Blog
Learn
Product FAQs
Â© 2025 Sigma Computing